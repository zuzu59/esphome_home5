#------------------------------
#-- rfbridge1.yaml
#-- Tests du bridge RF de SonOff
#-- J'essaie d'apprendre un code de la remote de mon store banne et de le rejouer
#-- zf220815.0935
#--
# sources: 
# Hardware utilisÃ© pour ce projet (mais attention en version V2 R2.2 !): https://sonoff.tech/product/smart-home-security/rf-bridge/
# Comme plus compatible pour Tasmota depuis fin 2021, il faut utiliser ceci:
# https://community.home-assistant.io/t/new-sonoff-rf-bridge-board-need-flashing-help/344326
# Oscilloscope pour visualiser les trames 433MHz: https://dbuezas.github.io/esphome-remote_receiver-oscilloscope/



esphome:
  name: rfbridge1

esp8266:
  board: esp8285

# Configuration WIFI
# On le force sur apzuzu7, plus stable
wifi:
  ssid: !secret wifi_ssid_apzuzu7
  password: !secret wifi_pass_apzuzu7

  # networks:
  
  #   - ssid: !secret wifi_ssid_apzuzu7
  #   - password: !secret wifi_pass_apzuzu7
    
  #   - ssid: !secret wifi_ssid_apzuzu6
  #   - password: !secret wifi_pass_apzuzu6

  #   - ssid: !secret wifi_ssid_3G_zf
  #   - password: !secret wifi_pass_3G_zf2
    
  #   - ssid: !secret wifi_ssid_3G_zf2
  #   - password: !secret wifi_pass_3G_zf2
    
  #   - ssid: !secret wifi_ssid_3g_s7
  #   - password: !secret wifi_pass_3g_s7
    
  #   - ssid: !secret wifi_ssid_apzuzu6_EXT
  #   - password: !secret wifi_pass_apzuzu6_EXT


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "energy-meter-1 Fallback"
    password: !secret ap_wifi_password

captive_portal:

# Enable logging
logger:
#    level: VERBOSE

# Enable Home Assistant API
api:
  password: !secret api_password

# Enable OTA
ota:
  password: !secret ota_password

# WEB Server
web_server:
  port: 80



status_led:
  pin:
    number: GPIO13
    inverted: yes

# USBRX = GPIO4 ---> receiver
# USBTX = GPIO5 ---> trasmitter

# receiver = pin 5 of the 8-legged chip (the one closer to the wifi antenna)
# transmitter = pin 4 of the 6-legged chip (closest to r12)


remote_receiver:
  pin:
    number: GPIO04
#    inverted: true
  dump:
    - rc_switch
  tolerance: 50%
  filter: 250us
  idle: 4ms
  buffer_size: 2kb

remote_transmitter:
  pin: GPIO05
  carrier_duty_percent: 100%

# this will log received commands, and can also transmit. Read up here:
# https://esphome.io/components/remote_transmitter.html#remote-setting-up-rf


switch:
  - platform: template
    name: RF Power Button 1
    turn_on_action:
      - remote_transmitter.transmit_rc_switch_raw:
          code: '001011100010101000000010'
          protocol: 6
          repeat:
            times: 12
            wait_time: 100ms

  - platform: template
    name: RF Power Button 2
    turn_on_action:
      - remote_transmitter.transmit_raw:
          code: [
          -1400, 701, -386, 362, -719, 720, -365, 362, -719, 365, -717, 721, -364, 361, -719, 722, -368, 
          716, -364, 720, -363, 718, -365, 717, -365, 718, -365, 719, -365, 719, -365, 362, -719, 722, 
          -364, 720, -364, 720, -364, 362, -720, 364, -720, 721
          ] 
          repeat:
            times: 12
 
         

  - platform: template
    name: RF Power Button 3
    turn_on_action:
      - remote_transmitter.transmit_pronto:
          data: "0000 006D 0001 0000 06C3 0000 006D 0029 0000 0038 001C 000D 000F 001B 001D 000D 000F 001B 000F 001B 001C 000D 000F 001B 001D 000D 001C 000D 001C 000D 001C 000D 001C 000D 001C 000D 001C 000D 001C 000D 000F 001B 001C 000D 001C 000D 001C 000D 000F 001B 000F 001B 001C 000D 001C 000D 001C 000D 000F 001B 000F 001B 000F 001B 000F 001B 000F 001B 001C 000D 000F 001B 001C 000D 000F 001B 000F 001B 000F 001B 001C 000D 001C 000D 001C 000D 001C 000D 000F 06C3"










