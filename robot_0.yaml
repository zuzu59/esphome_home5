#------------------------------
#-- robot_0.yaml
#-- Code pour piloter un petit robot NodeMCU à 20 balles au moyen d'un brocker MQTT
#-- Les commandes sont expressément très simplistes
#-- location: xxx
#-- zf221223.1706
#--
# sources: 
# ...

esphome:
  name: robot_0

esp8266:
  board: d1_mini

# Configuration WIFI
wifi:
  ssid: !secret wifi_ssid_apzuzu7
  password: !secret wifi_pass_apzuzu7

  # networks:
  
  #   - ssid: !secret wifi_ssid_apzuzu7
  #   - password: !secret wifi_pass_apzuzu7
    
  #   - ssid: !secret wifi_ssid_apzuzu6
  #   - password: !secret wifi_pass_apzuzu6

  #   - ssid: !secret wifi_ssid_3G_zf
  #   - password: !secret wifi_pass_3G_zf2
    
  #   - ssid: !secret wifi_ssid_3G_zf2
  #   - password: !secret wifi_pass_3G_zf2
    
  #   - ssid: !secret wifi_ssid_3g_s7
  #   - password: !secret wifi_pass_3g_s7
    
  #   - ssid: !secret wifi_ssid_apzuzu6_EXT
  #   - password: !secret wifi_pass_apzuzu6_EXT


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "robot_0 Fallback"
    password: !secret ap_wifi_password

captive_portal:

# Enable logging
logger:
    level: VERBOSE

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

# WEB Server
web_server:
  port: 80


# Définition des Switch's
switch:
  # - platform: gpio
  #   name: "robot_0 LED"
  #   inverted: True
  #   id: led
  #   pin: D4

  - platform: restart
    name: "robot_0 Restart"


  - platform: gpio
    name: "robot_0 motor Direction A "
    # inverted: True
    id: robot_0_motor_direction_a
    pin: D3

  - platform: gpio
    name: "robot_0 motor Direction B"
    # inverted: True
    id: robot_0_moto_direction_b
    pin: D4








  - platform: template
    name: "robot_0 Motor GO"
    id: robot_0_go
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - switch.turn_on:
          id: robot_0_start
      - number.set:
          id: robot_0_motor_time
          value: 20




  - platform: template
    name: "robot_0 Motor START"
    id: robot_0_start
    turn_on_action:
      - light.turn_on:
          id: robot_0_motor_speed_a
          brightness:  !lambda |-
            // output value must be in range 0 - 1.0
            return id(robot_0_motor_speed).state / 100.0;
      - light.turn_on:
          id: robot_0_motor_speed_b
          brightness:  !lambda |-
            // output value must be in range 0 - 1.0
            return id(robot_0_motor_speed).state / 100.0;


  - platform: template
    name: "robot_0 Motor STOP"
    id: robot_0_stop
    turn_on_action:
      - light.turn_off:
          id: robot_0_motor_speed_a
      - light.turn_off:
          id: robot_0_motor_speed_b




# Définition des Output's
output:
  - platform: esp8266_pwm
    pin: D1
    frequency: 200 Hz
    id: robot_0_motor_pwm_a

  - platform: esp8266_pwm
    pin: D2
    frequency: 200 Hz
    id: robot_0_motor_pwm_b

# Définition des Light's
light:
  - platform: monochromatic
    output: robot_0_motor_pwm_a
    name: "robot_0 motor Speed A"
    id: robot_0_motor_speed_a
    internal: true


  - platform: monochromatic
    output: robot_0_motor_pwm_b
    name: "robot_0 motor Speed B"
    id: robot_0_motor_speed_b
    internal: true






# Définition des Sensors
sensor:
  - platform: wifi_signal
    name: "robot_0 Signal Wi-Fi"
    update_interval: 60s

  - platform: uptime
    name: "robot_0 uptime"
    update_interval: 15s


  - platform: ultrasonic
    trigger_pin: D5
    echo_pin: D6
    name: "robot_0 distance"
    update_interval: 2s




# Définition des Sensors text
text_sensor:
  - platform: version
    name: "robot_0 Version 1150"

  - platform: wifi_info
    ip_address:
      name: robot_0 IP Address
      id: wifi_ip
    ssid:
      name: robot_0 Connected SSID
      id: wifi_ssid


# Définition des inputs numbers
number:
  - platform: template
    name: "robot_0 Motor Speed"
    id: robot_0_motor_speed
    restore_value: true
    optimistic: true
    min_value: 75
    max_value: 100
    step: 1
    initial_value: 100
    unit_of_measurement: "%"



  - platform: template
    name: "robot_0 Motor Time"
    id: robot_0_motor_time
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: 30
    step: 1
    initial_value: 20
    unit_of_measurement: "S"


    



# Gestion des timers
interval:


# Timer pour calculer le temps passé à avancer !
  - interval: 0.333s
    then:
      - if:
          condition:
            lambda: 'return id(robot_0_motor_time).state > 0;'
          then:
            - number.decrement:
                id: robot_0_motor_time
                cycle: false
          else:
            - if:
                condition:
                  lambda: 'return id(robot_0_go).state == 1;'
                then:
                  - switch.turn_on:
                      id: robot_0_stop
                  - switch.turn_off:
                      id: robot_0_go




      # lambda: id(robot_0_motor_time).state += 1 ;







      # - if:
      #     condition:
      #       lambda: 'return id(robot_0_motor_time).state > 0;'
      #     then:
      #       lambda: id(robot_0_motor_time).state += 1 ;
