#------------------------------
#-- th10.yaml
#-- Petit code pour monitorer la température et l'humidité dans une pièce
#-- location: salle de douche
#-- Si la pin D7 est à GND, alors part en dsleep pour une certaine durée autrement on tourne en mode normal !
#-- ATTENTION, il faut relier la pin D0 à RST pour qu'il puisse sortir du dsleep mode !
#-- calibration VCC diode: lambda: return id(th10_vcc_voltage).state + 1.258 ;
#-- zf230721.1310
#--
# sources: 
# https://esphome.io/components/sensor/htu21d.html
# Calcul de la durée sur une batterie: https://docs.google.com/spreadsheets/d/1I6s_R04LjGxCB0hrcvogGHNeITDwfXjM05hJhuqGkoU/edit#gid=1470557238

esphome:
  name: th10
  on_boot:
   - switch.turn_on: led
   - switch.turn_on: th10_power_htu21d
   - delay: 0.5s
#   - switch.turn_off: led


esp8266:
  board: d1_mini

# Configuration WIFI
wifi:
  fast_connect: true
  ssid: !secret wifi_ssid_apzuzu8
  password: !secret wifi_pass_apzuzu8
  # manual_ip:
  #   static_ip: 192.168.0.201
  #   gateway: 192.168.0.51
  #   dns1: 192.168.0.51
  #   dns2: 8.8.8.8
  #   subnet: 255.255.255.0



  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "th10 Fallback"
    password: !secret ap_wifi_password

captive_portal:

# Enable logging
logger:
  level: DEBUG
#  level: INFO
  logs:
    logger: INFO
    adc: INFO
    captive_portal: INFO
    deep_sleep: INFO
    htu21d: INFO
    i2c: INFO
    ota: INFO
    restart: INFO
    sensor: INFO
    switch: INFO
    switch.gpio: INFO
    uptime.sensor: INFO
    web_server: INFO
    wifi_signal.sensor: INFO
    mqtt: INFO
    mqtt.component: INFO
    mqtt.client: INFO
    mqtt.switch: INFO
    mqtt.sensor: INFO

# # Enable Home Assistant API
# api:
#  password: !secret api_password

ota:
  password: !secret ota_password

# WEB Server
web_server:
  port: 80

# MQTT server
mqtt:
  broker:  !secret mqtt_server_dev
  port:  !secret mqtt_port_dev
  username:  !secret mqtt_user_dev
  password:  !secret mqtt_password_dev
  birth_message:
  will_message:

# I2C conf
i2c:
  sda: D2
  scl: D1
  scan: false
#  frequency: 10khz


# Définition des Globals variables
globals:
   - id: last_value_temp
     type: float
     restore_value: yes
     initial_value: '20.0'


# Définition des Switch's
switch:
  - platform: gpio
    name: "th10 LED"
    inverted: True
    id: led
    pin: D4

  - platform: gpio
    name: "th10 power htu21d"
#    inverted: True
    id: th10_power_htu21d
    pin: D5

  - platform: restart
    name: "th10 Restart"

  - platform: shutdown
    name: "th10 Shutdown"
    id: th10_shutdown
    internal: true


# Définition des Scripts
script:
  # fonction BMS, shutdown si < 3.3 Volts !
  - id: my_bms
    then:
      - logger.log:
          format: "La batterie est à %.1f"
          args: [ 'id(th10_bat_voltage).state' ]
      - if:
          condition:
            lambda: 'return id(th10_bat_voltage).state < 3.2 ;'
          then:
            - logger.log: "La batterie est en dessous de 3.2 Volts !"
            - delay: 0.5s
            - switch.turn_on: th10_shutdown
          else:
            - logger.log: "La batterie est encore bonne !"


# Définition des Sensors
sensor:
  - platform: wifi_signal
    name: "th10 Signal Wi-Fi"
    update_interval: 5s
    on_value:
      if:
        condition:
          mqtt.connected:
        then:
          - logger.log: Je suis connecté sur le mqtt et j'envoie la sauce !
          #- delay: 1s
          - if:
              condition:
                lambda: 'return id(th10_sleep_mode).state == 1;'
              then:
                - logger.log: On me demande de dormir !
                - delay: 1s
                - deep_sleep.enter: deep_sleep_1
        else:
          - logger.log: Erreur 007 *********************************************************
          - if:
              condition:
                lambda: 'return id(th10_sleep_mode).state == 1;'
              then:
                - logger.log: On me demande de dormir !
                - deep_sleep.enter: deep_sleep_1

  - platform: uptime
    name: "th10 uptime"
    update_interval: 2s

# température et humidité
  - platform: htu21d
    update_interval: 12s

    temperature:
      name: "th10 Température"
      id: th10_temperature
      filters:
        - offset: -0.0

      on_value:
        then:
          - logger.log:
              format: "La température est à %.1f et la globale variable est à %.1f"
              args: [ 'id(th10_temperature).state' , 'id(last_value_temp)' ]
          - if:
              condition:
                lambda: 'return abs( id(th10_temperature).state - id(last_value_temp) ) > 0.10 ;'
              then:
                - logger.log: "c'est plus grand je la change !"
                - globals.set:
                    id: last_value_temp
                    value: !lambda 'return id(th10_temperature).state;'
              else:
                # - logger.log: c'est plus petit je ne fais rien !
                # - delay: 0.3s
                - if:
                    condition:
                      lambda: 'return id(th10_sleep_mode).state == 1;'
                    then:
                      # - logger.log: On me demande de dormir !
                      # - delay: 0.3s
                      - deep_sleep.enter: deep_sleep_1











    humidity:
      name: "th10 Humidité"
#      accuracy_decimals: 0

# tension VCC à l'intérieur de l'ESP
  - platform: adc
    pin: VCC
    name: "th10 VCC Voltage"
    id: th10_vcc_voltage
    update_interval: 2s
    unit_of_measurement: "V"
    accuracy_decimals: 3
    internal: true

# tension de la batterie
  - platform: template
    name: "th10 BAT Voltage"
    id: th10_bat_voltage
    update_interval: 2s
    unit_of_measurement: "V"
    accuracy_decimals: 3
    on_value:
      then:
        - script.execute: my_bms
    lambda: return id(th10_vcc_voltage).state + 1.352 ;
 
# capacité de la batterie
  - platform: template
    name: "th10 BAT capacity"
    update_interval: 2s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    lambda: return id(th10_bat_voltage).state ;
    filters:
      - calibrate_linear:
          - 3.4 -> 0.0
          - 4.0 -> 100.0
      # filtre la valeur minimale
      - lambda: |-
          if (x >= 0) 
            return x;
          else 
            return 0;
      # filtre la valeur maximale
      - lambda: |-
          if (x <= 100) 
            return x;
          else 
            return 100;


# Définition des binary sensor
binary_sensor:
  - platform: gpio
    pin:
      number: D7
      mode: INPUT_PULLUP
      inverted: True
    name: "th10 sleep mode"
    id: th10_sleep_mode


# Définition des Sensors text
text_sensor:
  - platform: version
    name: "th10 Version 1352"

  - platform: wifi_info
    ip_address:
      name: th10 IP Address
      id: wifi_ip
    ssid:
      name: th10 Connected SSID
      id: wifi_ssid


# Deep Sleep
deep_sleep:
#  run_duration: 5s
  sleep_duration: 60s
#  sleep_duration: 5s
  id: deep_sleep_1
