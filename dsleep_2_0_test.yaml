#------------------------------
#-- dsleep_2_0_test.yaml
#-- Petit code tester mon nouveau dsleep 2.0 intelligent basé sur les deltas de mesures et non sur le temps
#-- Pour simuler les deltas, j'utilise un diviseur résistif sur l'entrée ADC constitué d'un potientiomètre de 100k
#-- location: ...
#-- Si la pin D7 est à GND, alors part en dsleep pour une certaine durée autrement on tourne en mode normal !
#-- ATTENTION, il faut relier la pin D0 à RST pour qu'il puisse sortir du dsleep mode !
#-- ATTENTION, comme il n'y a qu'un seul convertisseur ADC sur l'ESP8266, il n'y a plus la fonction BMS et indicateur de capacité !
#-- zf221210.1531
#--
# sources: 
# https://esphome.io/components/sensor/htu21d.html
# Calcul de la durée sur une batterie: https://docs.google.com/spreadsheets/d/1I6s_R04LjGxCB0hrcvogGHNeITDwfXjM05hJhuqGkoU/edit#gid=1470557238

esphome:
  name: dsleep_2_0_test
  on_boot:
   - switch.turn_on: led
#   - switch.turn_off: led


esp8266:
  board: d1_mini

# Configuration WIFI
wifi:
  fast_connect: true
  ssid: !secret wifi_ssid_apzuzu7
  password: !secret wifi_pass_apzuzu7
  # manual_ip:
  #   static_ip: 192.168.0.201
  #   gateway: 192.168.0.51
  #   dns1: 192.168.0.51
  #   dns2: 8.8.8.8
  #   subnet: 255.255.255.0

  # networks:
  
  #   - ssid: !secret wifi_ssid_apzuzu7
  #   - password: !secret wifi_pass_apzuzu7
    
  #   - ssid: !secret wifi_ssid_apzuzu6
  #   - password: !secret wifi_pass_apzuzu6

  #   - ssid: !secret wifi_ssid_3G_zf
  #   - password: !secret wifi_pass_3G_zf2
    
  #   - ssid: !secret wifi_ssid_3G_zf2
  #   - password: !secret wifi_pass_3G_zf2
    
  #   - ssid: !secret wifi_ssid_3g_s7
  #   - password: !secret wifi_pass_3g_s7
    
  #   - ssid: !secret wifi_ssid_apzuzu6_EXT
  #   - password: !secret wifi_pass_apzuzu6_EXT


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "dsleep_2_0_test Fallback"
    password: !secret ap_wifi_password

captive_portal:

# Enable logging
logger:
  level: DEBUG
#  level: INFO
  logs:
    logger: INFO
    adc: INFO
    captive_portal: INFO
    deep_sleep: INFO
    htu21d: INFO
    i2c: INFO
    ota: INFO
    restart: INFO
    sensor: INFO
    switch: INFO
    switch.gpio: INFO
    uptime.sensor: INFO
    web_server: INFO
    wifi_signal.sensor: INFO
    mqtt: INFO
    mqtt.component: INFO
    mqtt.client: INFO
    mqtt.switch: INFO
    mqtt.sensor: INFO

# # Enable Home Assistant API
# api:
#  password: !secret api_password

ota:
  password: !secret ota_password

# WEB Server
web_server:
  port: 80

# MQTT server
mqtt:
  broker:  !secret mqtt_server_dev
  port:  !secret mqtt_port_dev
  username:  !secret mqtt_user_dev
  password:  !secret mqtt_password_dev
  birth_message:
  will_message:

# # I2C conf
# i2c:
#   sda: D2
#   scl: D1
# #  frequency: 10khz


# Définition des Switch's
switch:
  - platform: gpio
    name: "dsleep_2_0_test LED"
    inverted: True
    id: led
    pin: D4

  - platform: restart
    name: "dsleep_2_0_test Restart"

  - platform: shutdown
    name: "dsleep_2_0_test Shutdown"
    id: dsleep_2_0_test_shutdown
    internal: true


# # Définition des Scripts
# script:
#   # fonction BMS, shutdown si < 3.3 Volts !
#   - id: my_bms
#     then:
#       - logger.log:
#           format: "La batterie est à %.1f"
#           args: [ 'id(dsleep_2_0_test_bat_voltage).state' ]
#       - if:
#           condition:
#             lambda: 'return id(dsleep_2_0_test_bat_voltage).state < 3.3 ;'
#           then:
#             - logger.log: "La batterie est en dessous de 3.3 Volts !"
#             - delay: 0.5s
#             - switch.turn_on: dsleep_2_0_test_shutdown
#           else:
#             - logger.log: "La batterie est encore bonne !"


# Définition des Sensors
sensor:
  - platform: wifi_signal
    name: "dsleep_2_0_test Signal Wi-Fi"
    update_interval: 5s
    on_value:
      if:
        condition:
          mqtt.connected:
        then:
          - logger.log: Je suis connecté sur le mqtt et j'envoie la sauce !
          - delay: 0.1s
          - if:
              condition:
                lambda: 'return id(dsleep_2_0_test_sleep_mode).state == 1;'
              then:
                - logger.log: On me demande de dormir !
                - deep_sleep.enter: deep_sleep_1
        else:
          - logger.log: Erreur 007 *********************************************************
          - if:
              condition:
                lambda: 'return id(dsleep_2_0_test_sleep_mode).state == 1;'
              then:
                - logger.log: On me demande de dormir !
                - deep_sleep.enter: deep_sleep_1

  - platform: uptime
    name: "dsleep_2_0_test uptime"
    update_interval: 15s

# # température et humidité
#   - platform: htu21d
#     temperature:
#       name: "dsleep_2_0_test Température"
#     humidity:
#       name: "dsleep_2_0_test Humidité"
# #      accuracy_decimals: 0
#     update_interval: 15s

# tension VCC à l'intérieur de l'ESP
  - platform: adc
    pin: A0
    name: "dsleep_2_0_test VCC Voltage"
    id: dsleep_2_0_test_vcc_voltage
    update_interval: 2s
    unit_of_measurement: "V"
    accuracy_decimals: 3
#    internal: true

# # tension de la batterie
#   - platform: template
#     name: "dsleep_2_0_test BAT Voltage"
#     id: dsleep_2_0_test_bat_voltage
#     update_interval: 2s
#     unit_of_measurement: "V"
#     accuracy_decimals: 3
#     # on_value:
#     #   then:
#     #     - script.execute: my_bms
#     lambda: return id(dsleep_2_0_test_vcc_voltage).state + 1.258 ;
 
# capacité de la batterie
  # - platform: template
  #   name: "dsleep_2_0_test BAT capacity"
  #   update_interval: 2s
  #   unit_of_measurement: "%"
  #   accuracy_decimals: 0
  #   lambda: return id(dsleep_2_0_test_bat_voltage).state ;
  #   filters:
  #     - calibrate_linear:
  #         - 3.4 -> 0.0
  #         - 4.1 -> 100.0
  #     # filtre la valeur minimale
  #     - lambda: |-
  #         if (x >= 0) 
  #           return x;
  #         else 
  #           return 0;
  #     # filtre la valeur maximale
  #     - lambda: |-
  #         if (x <= 100) 
  #           return x;
  #         else 
  #           return 100;


# Définition des binary sensor
binary_sensor:
  - platform: gpio
    pin:
      number: D7
      mode: INPUT_PULLUP
      inverted: True
    name: "dsleep_2_0_test sleep mode"
    id: dsleep_2_0_test_sleep_mode


# Définition des Sensors text
text_sensor:
  - platform: version
    name: "dsleep_2_0_test Version 1352"

  - platform: wifi_info
    ip_address:
      name: dsleep_2_0_test IP Address
      id: wifi_ip
    ssid:
      name: dsleep_2_0_test Connected SSID
      id: wifi_ssid


# Deep Sleep
deep_sleep:
#  run_duration: 5s
  sleep_duration: 120s
  id: deep_sleep_1
