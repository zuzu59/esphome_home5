#------------------------------
#-- esp32-ble-ibeacon-scanner.yaml
#-- Scanner de iBeacon's. Les iBeacon's découverts se trouvent dans les logs
#-- Je squate une esp32-cam comme un esp32 simple avec Bluetooth 
#-- zf220116.1340
#--


# sources: 
# https://github.com/esphome/esphome/pull/1627

esphome:
  name: esp32-ble-ibeacon-scanner
  project:
    name: "zf.esp32-ble-ibeacon-scanner"
    version: "1.0.1"




esp32:
  board: esp32cam
  framework:
    type: arduino


# Configuration WIFI
wifi:
#   ssid: !secret wifi_ssid_apzuzu7
#   password: !secret wifi_pass_apzuzu7

  networks:
  
    - ssid: !secret wifi_ssid_apzuzu7
    - password: !secret wifi_pass_apzuzu7
    
    - ssid: !secret wifi_ssid_apzuzu6
    - password: !secret wifi_pass_apzuzu6
    
    - ssid: !secret wifi_ssid_3G_zf
    - password: !secret wifi_pass_3G_zf2
    
    - ssid: !secret wifi_ssid_3G_zf2
    - password: !secret wifi_pass_3G_zf2
    
    - ssid: !secret wifi_ssid_3g_s7
    - password: !secret wifi_pass_3g_s7
    
    - ssid: !secret wifi_ssid_apzuzu6_EXT
    - password: !secret wifi_pass_apzuzu6_EXT


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "esp32-ble-ibeacon-scanner AP"
    password: !secret ap_wifi_password

captive_portal:

# Enable logging
logger:
  level: DEBUG
#   level: VERBOSE
# #  level: VERY_VERBOSE
#   logs:
#     logger: INFO
#     adc: INFO
#     captive_portal: INFO
#     deep_sleep: INFO
#     htu21d: INFO
#     i2c: INFO
#     ota: INFO
#     restart: INFO
#     sensor: INFO
#     switch: INFO
#     switch.gpio: INFO
#     uptime.sensor: INFO
#     web_server: INFO
#     wifi_signal.sensor: INFO
#     mqtt: INFO
#     mqtt.component: INFO
#     mqtt.client: INFO
#     mqtt.switch: INFO
 

# Enable Home Assistant API
api:
  password: !secret api_password

# Enable OTA
ota:
  password: !secret ota_password

# WEB Server
web_server:
  port: 80


# Définition des Switch's
switch:
  - platform: restart
    name: "esp32-ble-ibeacon-scanner Restart"

  - platform: gpio
    name: "esp32-ble-ibeacon-scanner LED"
    inverted: True
    id: led
    pin: GPIO33

  - platform: gpio
    name: "esp32-ble-ibeacon-scanner LED FLASH"
#    inverted: True
    id: led_flash
    pin: GPIO4
    
  - platform: gpio
    name: "esp32-ble-ibeacon-scanner cam power"
    inverted: True
    id: cam_power
    pin: GPIO32




esp32_ble_tracker:
  scan_parameters:
    duration: 15s

  on_ble_advertise: 
    - lambda: |- 
        if(x.get_ibeacon().has_value()) 
          { auto ibeacon = x.get_ibeacon().value();
          ESP_LOGD(ibeacon.get_uuid().to_string().c_str(), "    iBeancon found***********************************");
        //if(strcmp(ibeacon.get_uuid().to_string().c_str(), "485726A9-2B28-CCB7-354D-0A49B3C68C4E") == 0) 
          //{ 
          id(ble_rssiz).publish_state(x.get_rssi());
        //  ESP_LOGD("ble_adv", "My Phone found***********************************");            
        //  }
        }






# Définition des sensors
sensor:
  - platform: wifi_signal
    name: "esp32-ble-ibeacon-scanner Signal Wi-Fi"
    update_interval: 60s

  - platform: uptime
    name: "esp32-ble-ibeacon-scanner uptime"
    update_interval: 60s


#   - platform: ble_rssi
#     name: "BLE SumUp 835 RSSI value"
#     mac_address: EF:D4:55:26:8C:27
#   - platform: ble_rssi
#     name: "BLE Tile 1 RSSI value"
#     mac_address: E0:AA:01:F9:AF:62
#   - platform: ble_rssi
#     name: "BLE Tile 2 RSSI value"
#     mac_address: E1:B0:A7:F3:63:03

#   - platform: ble_rssi
#     name: "BLE Beacon 4 RSSI value"
#     service_uuid: '4e8cc6b3-490a-4d35-b7cc-282ba9265748'


  - platform: template 
    id: ble_rssiz
    name: "BLE iBeacon RSSI" 
    icon: "mdi:signal-distance-variant" 
    internal: true
#    update_interval: never 
    unit_of_measurement: "dBm" 
#    filters: 
#      - median: 
#          window_size: 5 
#          send_every: 1




# function zcalc_distance(zrssi2)
#     zrssi_1m=-40    zn=2
#     zdist=10^((zrssi_1m - zrssi2) / (10 * zn))
#     return zdist
# end

# --[[
# print("distance: "..zcalc_distance(-60).."m")
# La formule pour calculer la distance est assez simple.
# d = 10 ^ ((TxPower - RSSI) / (10 * n))
# - TxPower est le RSSI mesuré à 1 m d'un point d'accès connu. Par exemple: -84 dB.
# - n est la constante de propagation ou l'exposant d'affaiblissement de trajet. Par exemple: 2,7 à 4,3 (l'espace libre a n = 2 pour référence).
# - RSSI est le RSSI mesuré
# - d est la distance en mètre
# ]]








# Définition des text sensors
text_sensor:
  - platform: version
    name: "esp32-ble-ibeacon-scanner Version"

  - platform: wifi_info
    ip_address:
      name: esp32-ble-ibeacon-scanner IP Address
      id: wifi_ip
    ssid:
      name: esp32-ble-ibeacon-scanner Connected SSID
      id: wifi_ssid


#  - platform: ble_scanner
#    name: "BLE Devices Scanner"



# Définition des binary sensors
binary_sensor:
  - platform: status
    name: "esp32-ble-ibeacon-scanner Status"

#   - platform: ble_presence
#     name: "BLE SumUp 835"
#     mac_address: EF:D4:55:26:8C:27
#   - platform: ble_presence
#     name: "BLE Tile 1"
#     mac_address: E0:AA:01:F9:AF:62
#   - platform: ble_presence
#     name: "BLE Tile 2"
#     mac_address: E1:B0:A7:F3:63:03

#   - platform: ble_presence
#     name: "BLE iBeacon 4"
#  #    service_uuid: '4e8cc6b3-490a-4d35-b7cc-282ba9265748'
#     ibeacon_uuid : 4e8cc6b3-490a-4d35-b7cc-282ba9265748 
# #     ibeacon_major : 100 
# #     ibeacon_minor : 1 

#   - platform: ble_presence
#     name: "BLE iBeacon inv"
# #    service_uuid: 'BB29E651-5759-259A-0049-A300A38C34A8'
#     ibeacon_uuid : BB29E651-5759-259A-0049-A300A38C34A8 
# #     ibeacon_major : 100 
# #     ibeacon_minor : 1 



