#------------------------------
#-- test-pompe1.yaml
#-- Petit code pour tester la régulation de la pompe pour chauffer la piscine d'Antoine
#-- si la T aller - T retour est > que T consigne, alors allume la bonne pompe
#-- tous les paramètres de configuration se trouvent en input number directement sur l'ESPhome !
#-- pour l'instant ce n'est qu'une maquette de démo !
#--
#-- pinout mini-d1: https://docs.google.com/document/d/1GOp2zN0aFk80cv2Hz6DmlEwY84OPwVK38da-KSO77zw/edit#heading=h.ohz2baooedzi
#-- zf220616.0821
#--

esphome:
  name: test-pompe1
esp8266:
  board: esp01_1m
  restore_from_flash: false
  
preferences:
  flash_write_interval: 10min

# Configuration WIFI
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # networks:
  #   - ssid: !secret wifi_ssid_apzuzu7
  #   - password: !secret wifi_pass_apzuzu7
  #   - ssid: !secret wifi_ssid_apzuzu6
  #   - password: !secret wifi_pass_apzuzu6
  #   - ssid: !secret wifi_ssid_3G_zf
  #   - password: !secret wifi_pass_3G_zf2
  #   - ssid: !secret wifi_ssid_3G_zf2
  #   - password: !secret wifi_pass_3G_zf2
  #   - ssid: !secret wifi_ssid_3g_s7
  #   - password: !secret wifi_pass_3g_s7
  #   - ssid: !secret wifi_ssid_apzuzu6_EXT
  #   - password: !secret wifi_pass_apzuzu6_EXT

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "test-pompe1 Fallback"
    password: !secret ap_wifi_password

# Enable wifi configuration fallback
captive_portal:

# Enable logging
logger:
#    level: VERBOSE

# Enable Home Assistant API
api:
  password: !secret api_password

# Enable OTA updates
ota:
  password: !secret ota_password

# Enable WEB Server
web_server:
  port: 80



# Configuration 1-wire pour les capteurs de température DS18B20
dallas:
  - pin: GPIO4
    update_interval: 3s


# Définition des Switch's
switch:
  - platform: gpio
    name: "test-pompe1 LED"
    inverted: True
    id: led
    pin: GPIO2

  - platform: restart
    name: "test-pompe1 Restart"

  - platform: template
    name: "test-pompe1 Priorite Jacuzzi"
    restore_state: true
    optimistic: true
    id: test_pompe1_priorite_jacuzzi

  - platform: template
    name: "test-pompe1 Pompe State"
    restore_state: true
    optimistic: true
    id: test_pompe1_pompe_state

  - platform: gpio
    name: "test-pompe1 pompe1"
    inverted: True
    id: test_pompe1_pompe1
    pin: GPIO14

  - platform: gpio
    name: "test-pompe1 pompe2"
    inverted: True
    id: test_pompe1_pompe2
    pin: GPIO12


# Définition des inputs numbers
number:
  - platform: template
    name: "test-pompe1 Température Delta"
    restore_value: true
    optimistic: true
    min_value: -10
    max_value: +10
    step: 1
    id: test_pompe1_temperature_delta

  - platform: template
    name: "test-pompe1 Température Hysterese"
    restore_value: true
    optimistic: true
    min_value: 0
    max_value: +10
    step: 1
    id: test_pompe1_temperature_hysterese

  - platform: template
    name: "test-pompe1 Température Calibration"
    restore_value: true
    optimistic: true
    min_value: -5
    max_value: +5
    step: 0.05
    id: test_pompe1_temperature_calibration


# Définition des sensors
sensor:
  - platform: wifi_signal
    name: "test-pompe1 Signal Wi-Fi"
    update_interval: 60s

  - platform: uptime
    name: "test-pompe1 uptime"
    update_interval: 60s

# temp aller
  - platform: dallas
    address: 0xd1020a92465ec628
    name: "test-pompe1 temp aller"
    id: test_pompe1_temp_aller
    filters:
        - lambda: return ( x - (id(test_pompe1_temperature_calibration).state /2) );

#temp retour
  - platform: dallas
    address: 0x3a0309977932c728
    name: "test-pompe1 temp retour"
    id: test_pompe1_temp_retour
    filters:
        - lambda: return ( x + (id(test_pompe1_temperature_calibration).state /2) );






#   - platform: template
#     name: test-pompe1 temp aller
#     id: test_pompe1_temp_aller
#     unit_of_measurement: "°K"
#     lambda: return ( id(test_pompe1_temp_t1).state - (id(test_pompe1_temperature_calibration).state /2) );
#     update_interval: 3s

#   - platform: template
#     name: test-pompe1 temp retour
#     id: test_pompe1_temp_retour
#     unit_of_measurement: "°K"
#     lambda: return ( id(test_pompe1_temp_t2).state + (id(test_pompe1_temperature_calibration).state /2) );
#     update_interval: 3s






  - platform: template
    name: "test-pompe1 temp diff"
    id: test_pompe1_temp_diff
    unit_of_measurement: "°K"
    lambda: 'return (id(test_pompe1_temp_retour).state - id(test_pompe1_temp_aller).state);'
    update_interval: 3s


# Définition des sensors texts
text_sensor:
  - platform: version
    name: "test-pompe1 Version"

  - platform: wifi_info
    ip_address:
      name: test-pompe1 IP Address
      id: wifi_ip
    ssid:
      name: test-pompe1 Connected SSID
      id: wifi_ssid




# Boucle de régulation
interval:
  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return (id(test_pompe1_temp_retour).state - id(test_pompe1_temp_aller).state) > (id(test_pompe1_temperature_delta).state + id(test_pompe1_temperature_hysterese).state);'
          then:
            - if:
                condition:
                  lambda: 'return id(test_pompe1_pompe_state).state == 0;'
                then:
                  - logger.log: "La tempéreature Retour est plus HAUTE que la tempéreature Aller, on allume la bonne pompe !"
                  - switch.turn_on: test_pompe1_pompe_state
                  - if:
                      condition:
                        lambda: 'return id(test_pompe1_priorite_jacuzzi).state == 0;'
                      then:
                        - switch.turn_on: test_pompe1_pompe1
                        - switch.turn_off: test_pompe1_pompe2
                      else:
                        - switch.turn_on: test_pompe1_pompe2
                        - switch.turn_off: test_pompe1_pompe1
      - if:
          condition:
            lambda: 'return (id(test_pompe1_temp_retour).state - id(test_pompe1_temp_aller).state) < (id(test_pompe1_temperature_delta).state - id(test_pompe1_temperature_hysterese).state);'
          then:
            - if:
                condition:
                  lambda: 'return id(test_pompe1_pompe_state).state == 1;'
                then:
                  - logger.log: "La tempéreature Retour est plus BASSE que la tempéreature Aller, on éteint toutes les pompes !"
                  - switch.turn_off: test_pompe1_pompe_state
                  - switch.turn_off: test_pompe1_pompe1
                  - switch.turn_off: test_pompe1_pompe2
          




